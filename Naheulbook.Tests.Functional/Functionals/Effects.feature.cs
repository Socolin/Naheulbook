// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Naheulbook.Tests.Functional.Functionals
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Effect")]
    public partial class EffectFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Effects.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Effect", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Listing effects by category")]
        public virtual void ListingEffectsByCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listing effects by category", null, ((string[])(null)));
#line 3
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
    testRunner.When("performing a GET to the url \"/api/v2/effectCategories/1/effects\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 5
    testRunner.Then("the response status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
    testRunner.And("the response should contains a json array containing the following element identi" +
                    "fied by id", @"{
    ""id"": 5,
    ""name"": ""Allongement des bras"",
    ""description"": ""Signe distinctif difficile à cacher, handicapant."",
    ""durationType"": ""forever"",
    ""duration"": null,
    ""combatCount"": null,
    ""lapCount"": null,
    ""timeDuration"": null,
    ""dice"": 5,
    ""categoryId"": 1,
    ""modifiers"": [
        {
            ""stat"": ""AD"",
            ""value"": -1,
            ""type"": ""ADD""
        },
        {
            ""stat"": ""CHA"",
            ""value"": -1,
            ""type"": ""ADD""
        }
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Listing effect categories")]
        public virtual void ListingEffectCategories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listing effect categories", null, ((string[])(null)));
#line 34
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
    testRunner.When("performing a GET to the url \"/api/v2/effectCategories/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
    testRunner.Then("the response status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
    testRunner.And("the response should contains a json array containing the following element identi" +
                    "fied by id", @"{
    ""id"": 1,
    ""name"": ""Mutation"",
    ""categories"": [
        {
            ""id"": 1,
            ""name"": ""Mutation mineure"",
            ""diceCount"": 2,
            ""diceSize"": 6,
            ""note"": ""La mutation magique survient en cinq minutes. Pour se débarrasser d'une mutation, lui ou un allié, un mage peut essayer un dispel magic, une seule fois.\nEn cas d'échec, il convient de se rendre dans une clinique de mages, à Glargh ou bien à Waldorg. Le résultat n'est pas garanti.\nDans le cas d'une mutation non visible immédiatement, le MJ doit se débrouiller pour permettre au héros de découvrir sa mutation, cela peut prendre du temps."",
            ""typeId"": 1
        },
        {
            ""id"": 2,
            ""name"": ""Mutation majeure"",
            ""diceCount"": 1,
            ""diceSize"": 20,
            ""note"": ""La mutation magique survient en cinq minutes. Pour se débarrasser d'une mutation, lui ou un allié, un mage peut essayer un dispel magic, une seule fois.\nEn cas d'échec, il convient de se rendre dans une clinique de mages, à Glargh ou bien à Waldorg. Le résultat n'est pas garanti.\nDans le cas d'une mutation non visible immédiatement, le MJ doit se débrouiller pour permettre au héros de découvrir sa mutation, cela peut prendre du temps."",
            ""typeId"": 1
        }
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
